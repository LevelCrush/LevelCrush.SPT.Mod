{"version":3,"file":"index.js","mappingsrbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AE7BA;AACA;AACA;AACA","sources":[".././src/mod.ts","../webpack/bootstrap","../webpack/before-startup","../webpack/startup","../webpack/after-startup"],"sourcesContent":["\"use strict\";\n//import modConfig from \"../config/config.json\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs_1 = __importDefault(require(\"fs\"));\nconst chokidar_1 = __importDefault(require(\"chokidar\"));\nconst jszip_1 = __importDefault(require(\"jszip\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst modName = \"RemotePlugins\";\nconst bepinexFilePath = \"BepInEx\";\nconst expectedBepinexDirectories = [\"config\", \"plugins\"];\nconst storagePath = \"files\";\nclass FileMap {\n    files = [];\n    addFile(Name, Hash, Size) {\n        this.files.push({ Name, Hash, Size });\n    }\n    removeFile(name) {\n        this.files.splice(this.files.findIndex(f => f.Name === name), 1);\n    }\n    getFiles() {\n        return this.files;\n    }\n    hasFile(file) {\n        return this.files[file] !== undefined;\n    }\n}\nclass PluginFileMap {\n    Files;\n    FilesHash;\n    Zip;\n}\nvar Synchronization;\n(function (Synchronization) {\n    Synchronization[\"UpdateOnly\"] = \"UPDATE_ONLY\";\n    Synchronization[\"DeleteAndSync\"] = \"DELETE_AND_SYNC\"; // Client should delete all files in the directories which have files in the FileMap\n})(Synchronization || (Synchronization = {}));\nclass RemotePlugins {\n    logger;\n    vfs;\n    hashUtil;\n    rootPluginPath;\n    storagePath;\n    normalizedStoragePath;\n    bepinexFilePath;\n    fileWatcher;\n    cachedPluginFileMap;\n    cachedPluginFileMapJson;\n    filesChanged;\n    modConfig;\n    preAkiLoad(container) {\n        this.logger = container.resolve(\"WinstonLogger\");\n        this.rootPluginPath = path_1.default.normalize(path_1.default.join(__dirname, \"../\"));\n        this.LoadModConfig();\n        const dirs = this.rootPluginPath.split(path_1.default.sep).join(\"/\");\n        this.storagePath = `${dirs}${storagePath}/`;\n        this.normalizedStoragePath = path_1.default.normalize(this.storagePath);\n        this.bepinexFilePath = `${dirs}${bepinexFilePath}/`;\n        this.LogInfo(`Root plugin path: ${this.rootPluginPath}`);\n        this.LogInfo(`Storage path: ${this.storagePath}`);\n        this.LogInfo(`BepInEx path: ${this.bepinexFilePath}`);\n        const httpListenerService = container.resolve(\"HttpListenerModService\");\n        httpListenerService.registerHttpListener(\"RemotePluginsClientOptionsHttpListener\", this.remotePluginsClientOptionsHttpListener_canHandleOverride, this.remotePluginsClientOptionsHttpListener_handleOverride());\n        httpListenerService.registerHttpListener(\"RemotePluginsFileMapHttpListener\", this.remotePluginsFileMapHttpListener_canHandleOverride, this.remotePluginsFileMapHttpListener_handleOverride());\n        httpListenerService.registerHttpListener(\"RemotePluginsFileHttpListener\", this.remotePluginsFileHttpListener_canHandleOverride, this.remotePluginsFileHttpListener_handleOverride());\n    }\n    LoadModConfig() {\n        this.modConfig = this.generateDefaultModConfig();\n        try {\n            if (!fs_1.default.existsSync(`${this.rootPluginPath}/config`)) {\n                fs_1.default.mkdirSync(`${this.rootPluginPath}/config`);\n            }\n            if (fs_1.default.existsSync(`${this.rootPluginPath}/config/config.json`)) {\n                const configReader = fs_1.default.readFileSync(`${this.rootPluginPath}/config/config.json`, \"utf8\");\n                this.modConfig = { ...this.modConfig, ...JSON.parse(configReader) };\n            }\n            // this is to ensure that the config is always up to date\n            fs_1.default.writeFileSync(`${this.rootPluginPath}/config/config.json`, JSON.stringify(this.modConfig, null, 4));\n        }\n        catch (e) {\n            this.LogError(e.stack);\n        }\n    }\n    remotePluginsClientOptionsHttpListener_canHandleOverride(sessionId, req) {\n        return req.method === \"GET\" && req.url?.includes(`/${modName}/ClientOptions`);\n    }\n    remotePluginsClientOptionsHttpListener_handleOverride() {\n        // biome-ignore lint/complexity/noUselessThisAlias: this is overriden by the httpListenerService so we need the alias\n        const _this = this;\n        const responseFunc = async (sessionId, req, resp) => {\n            const clientOptionsJson = JSON.stringify(_this.modConfig.ClientOptions);\n            resp.setHeader(\"Content-Type\", \"application/json\");\n            resp.setHeader(\"Content-Length\", clientOptionsJson.length);\n            resp.writeHead(200, \"OK\");\n            resp.end(clientOptionsJson);\n        };\n        return responseFunc;\n    }\n    remotePluginsFileMapHttpListener_canHandleOverride(sessionId, req) {\n        return req.method === \"GET\" && req.url?.includes(`/${modName}/FileMap`);\n    }\n    remotePluginsFileMapHttpListener_handleOverride() {\n        // biome-ignore lint/complexity/noUselessThisAlias: this is overriden by the httpListenerService so we need the alias\n        const _this = this;\n        const responseFunc = async (sessionId, req, resp) => {\n            let retryCount = 0;\n            while (!_this.cachedPluginFileMapJson && retryCount < 60) { // 30 seconds\n                await _this.sleep(500);\n                retryCount++;\n                _this.LogDebug(`Waiting for file map: ${retryCount}`);\n            }\n            if (!_this.cachedPluginFileMapJson && retryCount >= 40) {\n                resp.writeHead(500, \"Failed to build file map\");\n                resp.end();\n                return;\n            }\n            resp.setHeader(\"Content-Type\", \"application/json\");\n            resp.setHeader(\"Content-Length\", _this.cachedPluginFileMapJson.length);\n            resp.writeHead(200, \"OK\");\n            resp.end(_this.cachedPluginFileMapJson);\n        };\n        return responseFunc;\n    }\n    remotePluginsFileHttpListener_canHandleOverride(sessionId, req) {\n        return req.method === \"GET\" && req.url?.includes(`/${modName}/File`);\n    }\n    remotePluginsFileHttpListener_handleOverride() {\n        // biome-ignore lint/complexity/noUselessThisAlias: this is overriden by the httpListenerService so we need the alias\n        const _this = this;\n        const responseFunc = async (sessionId, req, resp) => {\n            let retryCount = 0;\n            while (!_this.cachedPluginFileMap && retryCount < 60) { // 30 seconds\n                await _this.sleep(500);\n                retryCount++;\n            }\n            if (!_this.cachedPluginFileMap && retryCount >= 40) {\n                resp.writeHead(500, \"Failed to get file\");\n                resp.end();\n                return;\n            }\n            if (!_this.cachedPluginFileMap.Zip) {\n                resp.writeHead(404, \"No file\");\n                resp.end();\n                return;\n            }\n            if (_this.cachedPluginFileMap.Zip.Name !== \"bepinex.zip\" || !_this.cachedPluginFileMap.Zip.Hash || !_this.cachedPluginFileMap.Zip.Size) {\n                resp.writeHead(500, \"Failed to get file\");\n                resp.end();\n                return;\n            }\n            resp.setHeader(\"Content-Type\", \"application/zip\");\n            resp.setHeader(\"Content-Length\", _this.cachedPluginFileMap.Zip.Size);\n            resp.writeHead(200, \"OK\");\n            const readStream = fs_1.default.createReadStream(`${_this.storagePath}bepinex.zip`);\n            readStream.pipe(resp);\n        };\n        return responseFunc;\n    }\n    postDBLoad(container) {\n        this.vfs = container.resolve(\"VFS\");\n        this.hashUtil = container.resolve(\"HashUtil\");\n    }\n    async postAkiLoad(container) {\n        if (!this.vfs.exists(this.storagePath)) {\n            this.vfs.createDir(this.storagePath);\n        }\n        if (expectedBepinexDirectories.length > 0) {\n            for (const dir of expectedBepinexDirectories) {\n                const expectedPath = `${this.bepinexFilePath}${dir}/`;\n                this.logger.info(`Checking for ${expectedPath}`);\n                if (!this.vfs.exists(`${expectedPath}`)) {\n                    this.logger.info(`Creating ${expectedPath}`);\n                    this.vfs.createDir(`${expectedPath}`);\n                }\n            }\n        }\n        else {\n            if (!this.vfs.exists(this.bepinexFilePath)) {\n                this.vfs.createDir(this.bepinexFilePath);\n            }\n        }\n        this.fileWatcher = chokidar_1.default.watch([this.bepinexFilePath, this.storagePath], {\n            persistent: true,\n            ignoreInitial: true,\n            depth: 5,\n        });\n        this.fileWatcher\n            .on(\"add\", (path) => { this.onFileAdd(path); })\n            .on(\"change\", (path) => { this.onFileChange(path); })\n            .on(\"unlink\", (path) => { this.onFileUnlink(path); })\n            .on(\"error\", (error) => { this.LogError(error.stack); });\n        // load the file map\n        try {\n            const fileMapJson = this.vfs.readFile(`${this.storagePath}fileMap.json`);\n            const fileMap = JSON.parse(fileMapJson);\n            const filesDidChange = await this.FilesDidChange(fileMap);\n            if (!filesDidChange) {\n                this.cachedPluginFileMap = fileMap;\n                this.cachedPluginFileMapJson = fileMapJson;\n            }\n            else {\n                this.LogInfo(\"fileMap.json changed\");\n            }\n        }\n        catch (e) {\n            // no file map\n            this.filesChanged = true;\n            this.rebuildFiles();\n            return;\n        }\n        // check if the bepinex files have changed\n        try {\n            if (this.cachedPluginFileMap.Zip) {\n                const bepinexHash = this.generateFileHash(`${this.storagePath}bepinex.zip`);\n                if (bepinexHash === this.cachedPluginFileMap.Zip.Hash) {\n                    this.LogInfo(\"files are the same, no rebuild needed\");\n                    return;\n                }\n                this.LogInfo(\"bepinex.zip changed\");\n            }\n        }\n        catch (e) { }\n        // no hash or hash is different\n        this.filesChanged = true;\n        this.rebuildFiles();\n        return;\n    }\n    onFileAdd(filePath) {\n        if (filePath.startsWith(this.normalizedStoragePath))\n            return;\n        this.filesChanged = true;\n        this.LogInfo(`File added: ${filePath.replace(this.rootPluginPath, \"\")}`);\n        this.rebuildFiles();\n    }\n    onFileChange(filePath) {\n        if (!filePath.startsWith(this.normalizedStoragePath)) {\n            this.clearCachedData();\n        }\n        else if (this.filesChanged) {\n            return; // fileMap or zip changed & we are rebuilding\n        }\n        this.filesChanged = true;\n        this.LogInfo(`File changed: ${filePath.replace(this.rootPluginPath, \"\")}`);\n        this.rebuildFiles();\n    }\n    onFileUnlink(filePath) {\n        this.filesChanged = true;\n        this.LogInfo(`File deleted: ${filePath.replace(this.rootPluginPath, \"\")}`);\n        this.rebuildFiles();\n    }\n    rebuildFiles = this.debounce(() => {\n        const _this = this;\n        _this.rebuildFilesNow();\n    }, 1000);\n    buildingInProgress = false;\n    buildsWaiting = 0;\n    async rebuildFilesNow() {\n        if (!this.filesChanged) {\n            return;\n        }\n        if (this.buildsWaiting > 0) {\n            return;\n        }\n        this.buildsWaiting++;\n        while (this.buildingInProgress) {\n            await this.sleep(50);\n        }\n        this.buildsWaiting--;\n        this.LogInfo(\"Rebuilding files\", true);\n        this.buildingInProgress = true;\n        this.clearCachedData();\n        const pluginFileMap = await this.createNewData();\n        if (!pluginFileMap) {\n            this.LogError(\"Failed to create new data\");\n            this.buildingInProgress = false;\n            return;\n        }\n        this.cachedPluginFileMap = pluginFileMap;\n        this.cachedPluginFileMapJson = JSON.stringify(pluginFileMap);\n        setTimeout(() => {\n            this.buildingInProgress = false;\n            this.LogInfo(\"Rebuilding files done\", true);\n            this.filesChanged = false;\n        }, 500);\n    }\n    clearCachedData() {\n        this.cachedPluginFileMap = null;\n        this.cachedPluginFileMapJson = null;\n    }\n    async createNewData(writeFiles = true) {\n        const startTime = new Date().getTime();\n        const zip = new jszip_1.default();\n        const map = new FileMap();\n        const files = this.getFilesRecursively(this.bepinexFilePath);\n        for (const file of files) {\n            const relativePath = file.replace(this.bepinexFilePath, \"\");\n            if (fs_1.default.lstatSync(file).isDirectory()) {\n                const emptyFolderPath = `${relativePath}/`;\n                // this should be an empty directory, but we need those added to the file map as well\n                map.addFile(emptyFolderPath, \"\", 0);\n                // add to the zip as well\n                if (writeFiles) {\n                    zip.file(emptyFolderPath, \"\", { createFolders: true });\n                }\n            }\n            else { // file\n                const data = fs_1.default.readFileSync(`${file}`);\n                const sha256Hash = this.hashUtil.generateHashForData(\"sha256\", data);\n                map.addFile(relativePath, sha256Hash, data.length);\n                if (writeFiles) {\n                    zip.file(relativePath, data, { binary: true, createFolders: true, compression: \"DEFLATE\", compressionOptions: { level: 1 } }); // level 1 is fastest and in my testing the time/compression ratio doesn't get better with higher levels\n                }\n            }\n        }\n        const pluginFileMap = new PluginFileMap();\n        pluginFileMap.Files = map.getFiles();\n        if (Object.keys(pluginFileMap.Files).length === 0) {\n            pluginFileMap.FilesHash = \"\";\n            pluginFileMap.Zip = null;\n            try {\n                this.vfs.writeFile(`${this.storagePath}fileMap.json`, JSON.stringify(pluginFileMap), false, true);\n                this.vfs.removeFile(`${this.storagePath}bepinex.zip`);\n            }\n            catch (e) {\n                if (!e.message.includes(\"ENOENT\")) {\n                    this.LogError(e.stack);\n                }\n            }\n            return pluginFileMap;\n        }\n        // generate hashes\n        pluginFileMap.FilesHash = this.hashUtil.generateHashForData(\"sha256\", JSON.stringify(pluginFileMap.Files));\n        if (!writeFiles) {\n            return pluginFileMap;\n        }\n        const zipFileBuffer = await zip.generateAsync({ type: \"nodebuffer\" });\n        pluginFileMap.Zip = {\n            Name: \"bepinex.zip\",\n            Hash: this.hashUtil.generateHashForData(\"sha256\", zipFileBuffer),\n            Size: zipFileBuffer.length\n        };\n        fs_1.default.writeFileSync(`${this.storagePath}bepinex.zip`, zipFileBuffer);\n        this.vfs.writeFile(`${this.storagePath}fileMap.json`, JSON.stringify(pluginFileMap), false, true);\n        const endTime = new Date().getTime();\n        this.LogInfo(`Rebuilt files in ${endTime - startTime}ms`, true);\n        return pluginFileMap;\n    }\n    async FilesDidChange(fileMap) {\n        const currentFileMap = await this.createNewData(false);\n        if (!currentFileMap || !fileMap) {\n            if (!currentFileMap) {\n                this.LogError(\"Current file map is null\");\n            }\n            if (!fileMap) {\n                this.LogError(\"File map is null\");\n            }\n            return true;\n        }\n        if (currentFileMap.FilesHash !== fileMap.FilesHash) {\n            const hash = currentFileMap.FilesHash === null || currentFileMap.FilesHash.length === 0 ? \"empty\" : currentFileMap.FilesHash;\n            this.LogInfo(`Files hash changed: ${hash} != ${fileMap.FilesHash}`);\n            return true;\n        }\n        return false;\n    }\n    sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n    generateFileHash(file) {\n        const data = fs_1.default.readFileSync(`${file}`);\n        return this.hashUtil.generateHashForData(\"sha256\", data);\n    }\n    getFilesRecursively(directory) {\n        let currentDirectory = directory;\n        if (currentDirectory.endsWith(\"/\")) {\n            currentDirectory = currentDirectory.substring(0, currentDirectory.length - 1);\n        }\n        const files = this.vfs.getFiles(currentDirectory);\n        for (let i = 0; i < files.length; i++) {\n            files[i] = `${currentDirectory}/${files[i]}`;\n        }\n        const dirs = this.vfs.getDirs(currentDirectory);\n        for (const dir of dirs) {\n            const subFiles = this.getFilesRecursively(`${currentDirectory}/${dir}`);\n            if (subFiles.length > 0) {\n                files.push(...subFiles);\n            }\n            else {\n                files.push(`${currentDirectory}/${dir}`);\n            }\n        }\n        return files;\n    }\n    // Debounce for file changes\n    // biome-ignore lint/suspicious/noExplicitAny: we can't know the type of the function\n    debounce(func, wait) {\n        let timeout;\n        // biome-ignore lint/suspicious/noExplicitAny: we can't know the type of the function\n        return ((...args) => {\n            const later = () => {\n                timeout = null;\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        });\n    }\n    generateDefaultModConfig() {\n        return {\n            Debug: false,\n            ClientOptions: {\n                SyncType: Synchronization.DeleteAndSync\n            }\n        };\n    }\n    // Logging\n    LogInfo(message, alwaysLog = false) {\n        if (this.modConfig.Debug || alwaysLog) {\n            this.logger.info(`[${modName}] I: ${message}`);\n        }\n    }\n    LogWarning(message) {\n        if (this.modConfig.Debug) {\n            this.logger.warning(`[${modName}] W: ${message}`);\n        }\n    }\n    LogError(message) {\n        this.logger.error(`[${modName}] E: ${message}`);\n    }\n    LogDebug(message) {\n        if (this.modConfig.Debug) {\n            this.logger.debug(`[${modName}] D: ${message}`);\n        }\n    }\n}\nmodule.exports = { mod: new RemotePlugins() };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1948);\n",""],"names":[],"sourceRoot":""}